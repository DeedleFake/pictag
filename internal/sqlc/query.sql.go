// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package sqlc

import (
	"context"
	"time"
)

const createImage = `-- name: CreateImage :one
INSERT INTO images (id, image_created_at) VALUES (?, ?) RETURNING id, created_at, updated_at, image_created_at
`

type CreateImageParams struct {
	ID             string
	ImageCreatedAt time.Time
}

func (q *Queries) CreateImage(ctx context.Context, arg CreateImageParams) (Image, error) {
	row := q.db.QueryRowContext(ctx, createImage, arg.ID, arg.ImageCreatedAt)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ImageCreatedAt,
	)
	return i, err
}

const getImage = `-- name: GetImage :one
SELECT id, created_at, updated_at, image_created_at FROM images WHERE id = ? LIMIT 1
`

func (q *Queries) GetImage(ctx context.Context, id string) (Image, error) {
	row := q.db.QueryRowContext(ctx, getImage, id)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ImageCreatedAt,
	)
	return i, err
}

const listImages = `-- name: ListImages :many
SELECT id, created_at, updated_at, image_created_at FROM images ORDER BY created_at LIMIT ? OFFSET ?
`

type ListImagesParams struct {
	Limit  int64
	Offset int64
}

func (q *Queries) ListImages(ctx context.Context, arg ListImagesParams) ([]Image, error) {
	rows, err := q.db.QueryContext(ctx, listImages, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Image
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ImageCreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchTags = `-- name: SearchTags :many
SELECT name, COUNT(*) FROM tags WHERE name LIKE ? GROUP BY name ORDER BY COUNT(*) DESC, name ASC LIMIT ?
`

type SearchTagsParams struct {
	Name  string
	Limit int64
}

type SearchTagsRow struct {
	Name  string
	Count int64
}

func (q *Queries) SearchTags(ctx context.Context, arg SearchTagsParams) ([]SearchTagsRow, error) {
	rows, err := q.db.QueryContext(ctx, searchTags, arg.Name, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchTagsRow
	for rows.Next() {
		var i SearchTagsRow
		if err := rows.Scan(&i.Name, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const tagImage = `-- name: TagImage :one
INSERT INTO tags (name, image_id) VALUES (?, ?) RETURNING id, name, image_id, created_at
`

type TagImageParams struct {
	Name    string
	ImageID string
}

func (q *Queries) TagImage(ctx context.Context, arg TagImageParams) (Tag, error) {
	row := q.db.QueryRowContext(ctx, tagImage, arg.Name, arg.ImageID)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ImageID,
		&i.CreatedAt,
	)
	return i, err
}

const addMigration = `-- name: addMigration :exec
INSERT INTO migrations (name) VALUES (?)
`

func (q *Queries) addMigration(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, addMigration, name)
	return err
}

const listMigrations = `-- name: listMigrations :many
SELECT name FROM migrations ORDER BY name ASC
`

func (q *Queries) listMigrations(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, listMigrations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
