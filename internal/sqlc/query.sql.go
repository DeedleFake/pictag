// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package sqlc

import (
	"context"
	"time"
)

const createImage = `-- name: CreateImage :one
INSERT INTO images (id, image_created_at) VALUES (?, ?) RETURNING id, created_at, updated_at, image_created_at
`

type CreateImageParams struct {
	ID             string
	ImageCreatedAt time.Time
}

func (q *Queries) CreateImage(ctx context.Context, arg CreateImageParams) (Image, error) {
	row := q.db.QueryRowContext(ctx, createImage, arg.ID, arg.ImageCreatedAt)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ImageCreatedAt,
	)
	return i, err
}

const getImage = `-- name: GetImage :one
SELECT id, created_at, updated_at, image_created_at FROM images WHERE id = ? LIMIT 1
`

func (q *Queries) GetImage(ctx context.Context, id string) (Image, error) {
	row := q.db.QueryRowContext(ctx, getImage, id)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ImageCreatedAt,
	)
	return i, err
}

const tagImage = `-- name: TagImage :one
INSERT INTO tags (name, image_id) VALUES (?, ?) RETURNING id, name, image_id, created_at
`

type TagImageParams struct {
	Name    string
	ImageID string
}

func (q *Queries) TagImage(ctx context.Context, arg TagImageParams) (Tag, error) {
	row := q.db.QueryRowContext(ctx, tagImage, arg.Name, arg.ImageID)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ImageID,
		&i.CreatedAt,
	)
	return i, err
}
